var F=Object.defineProperty,q=Object.defineProperties;var z=Object.getOwnPropertyDescriptors;var w=Object.getOwnPropertySymbols;var j=Object.prototype.hasOwnProperty,U=Object.prototype.propertyIsEnumerable;var R=(e,r,a)=>r in e?F(e,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[r]=a,_=(e,r)=>{for(var a in r||(r={}))j.call(r,a)&&R(e,a,r[a]);if(w)for(var a of w(r))U.call(r,a)&&R(e,a,r[a]);return e},L=(e,r)=>q(e,z(r));import{j as l,F as p,a as t,C as S,M as G,d as W,b as A,c as Q,e as Y,L as J,f as V,I as X,g as Z,u as P,B as E,h as i,E as T,i as ee,k as M,l as te,m as v,n as ae,o as x,p as re,T as C,q as I,r as oe,s as ne,t as ie,v as N,w as se,x as le,y as ce,z as ue,A as b,D as de,G as pe,H as ge,J as fe,K as m,N as he,O as ye,P as me,Q as $e,R as ke,S as Ee,U as be,V as Te,W as Be,X as xe,Y as Pe,Z as _e,_ as B,$ as Le,a0 as Me,a1 as H,a2 as ve,a3 as He,a4 as we,a5 as Re,a6 as Se,a7 as Ae,a8 as Ce,a9 as Ie,aa as Ne,ab as Oe,ac as De,ad as Ke,ae as Fe,af as qe,ag as ze,ah as je,ai as Ue,aj as Ge,ak as We,al as Qe,am as Ye,an as Je,ao as Ve,ap as Xe,aq as Ze,ar as et,as as tt,at,au as rt,av as ot,aw as nt,ax as it,ay as st,az as u,aA as lt,aB as ct,aC as ut,aD as dt,aE as pt,aF as gt}from"./vendor.1b6d2e86.js";const ft=function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))d(o);new MutationObserver(o=>{for(const n of o)if(n.type==="childList")for(const g of n.addedNodes)g.tagName==="LINK"&&g.rel==="modulepreload"&&d(g)}).observe(document,{childList:!0,subtree:!0});function a(o){const n={};return o.integrity&&(n.integrity=o.integrity),o.referrerpolicy&&(n.referrerPolicy=o.referrerpolicy),o.crossorigin==="use-credentials"?n.credentials="include":o.crossorigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function d(o){if(o.ep)return;o.ep=!0;const n=a(o);fetch(o.href,n)}};ft();function ht(){const e=P();return l(p,{children:[t(E,{type:i(e,T),icon:t(ee,{})}),t(E,{type:i(e,M),icon:t(te,{})}),t(E,{type:i(e,v),icon:t(ae,{})}),t(E,{type:i(e,x),icon:t(re,{})})]})}function yt(){const e=P();return l(p,{children:[t(C,{onMouseDown:e&&I(Pe,e),icon:t(oe,{})}),t(C,{onMouseDown:e&&I(ne,e),icon:t(ie,{})})]})}function mt(){const e=P();return l(p,{children:[t(N,{type:i(e,se),icon:t(le,{})}),t(N,{type:i(e,ce),icon:t(ue,{})})]})}function $t(){return l(p,{children:[t(b,{value:"left",icon:t(de,{})}),t(b,{value:"center",icon:t(pe,{})}),t(b,{value:"right",icon:t(ge,{})}),t(b,{value:"justify",icon:t(fe,{})})]})}function kt(){const e=P();return l(p,{children:[t(m,{type:i(e,he),icon:t(ye,{})}),t(m,{type:i(e,me),icon:t($e,{})}),t(m,{type:i(e,ke),icon:t(Ee,{})}),t(m,{type:i(e,be),icon:t(Te,{})}),t(m,{type:i(e,Be),icon:t(xe,{})})]})}function Et(){return l(p,{children:[t(ht,{}),t(mt,{}),t(yt,{}),t(kt,{}),t(S,{pluginKey:G,icon:t(W,{}),selectedIcon:t(A,{})}),t(S,{pluginKey:Q,icon:t(Y,{}),selectedIcon:t(A,{})}),t($t,{}),t(J,{icon:t(V,{})}),t(X,{icon:t(Z,{})})]})}const O={types:[x,H],defaultType:B},s={editableProps:{spellCheck:!0,autoFocus:!1,placeholder:"Ecrivez...",style:{padding:"15px"}},components:_e(),align:{inject:{props:{validTypes:[B,T,M,v]}}},indent:{inject:{props:{validTypes:[B,T,M,v,x]}}},resetBlockType:{options:{rules:[L(_({},O),{hotkey:"Enter",predicate:Le}),L(_({},O),{hotkey:"Backspace",predicate:Me})]}},trailingBlock:{type:B},softBreak:{options:{rules:[{hotkey:"shift+enter"},{hotkey:"enter",query:{allow:[x,H]}}]}},exitBreak:{options:{rules:[{hotkey:"mod+enter"},{hotkey:"mod+shift+enter",before:!0},{hotkey:"enter",query:{start:!0,end:!0,allow:ve}}]}},selectOnBackspace:{options:{query:{allow:[H,He]}}},forceLayout:{options:{rules:[{path:[0],type:T}]}}};function bt(){const e=we([Re(),Se(),Ae(),Ce({props:{caption:{placeholder:"\xC9crivez une l\xE9gende...",align:"center"}}}),Ie(),Ne(),Oe(s.align),De(),Ke(),Fe(),qe(),ze(),je(),Ue(),Ge(),We(),Qe(s.indent),Ye(),Je(s.resetBlockType),Ve(s.softBreak),Xe(s.exitBreak),Ze(s.forceLayout),et(s.trailingBlock),tt(s.selectOnBackspace),at()],{components:s.components});return t("div",{style:{border:"solid 2px #e4e4e4",borderRadius:"4px"},children:t(rt,{backend:ot,children:t(nt,{id:"mail-editor",plugins:e,editableProps:s.editableProps,children:t(it,{style:{marginBottom:0,padding:"5px",margin:0},children:t(Et,{})})})})})}const c=e=>e.indent!==void 0||e.align!==void 0?`style="${e.indent?`margin-left: ${24*e.indent}px;`:""}${e.align?`text-align: ${e.align};`:""}"`:"",Tt=({element:e,children:r})=>{switch(e.type){case"blockquote":return`<blockquote ${c(e)}>${r}</blockquote>`;case"p":return`<p ${c(e)}>${r}</p>`;case"a":return`<a ${c(e)} href="${D(e.url)}">${r}</a>`;case"h1":return`<h1 ${c(e)}>${r}</h1>`;case"h2":return`<h2 ${c(e)}>${r}</h2>`;case"h3":return`<h3 ${c(e)}>${r}</h3>`;case"hr":return"<hr>";case"ol":return`<ol ${c(e)}>${r}</ol>`;case"ul":return`<ul ${c(e)}>${r}</ul>`;case"li":return`<li ${c(e)}>${r}</li>`;case"img":const a=e.caption&&e.caption[0]&&e.caption[0].text;return`<figure>
      <img width="${e.width?e.width:"100%"}" src="${D(e.url)}">
      ${a?`<figcaption>${a}</figcaption>`:""}
      </figure>
      `;default:return r}},Bt=({leaf:e,children:r})=>{let a=r;return e.bold&&(a=`<strong>${a}</strong>`),e.italic&&(a=`<i>${a}</i>`),e.underline&&(a=`<u>${a}</u>`),e.strikethrough&&(a=`<del>${a}</del>`),e.strikethrough&&(a=`<del>${a}</del>`),e.code&&(a=`<code>${a}</code>`),e.color&&(a=`<span style="color: ${e.color};">${a}</span>`),e.backgroundColor&&(a=`<span style="background-color: ${e.backgroundColor};">${a}</span>`),a},D=e=>e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"),xt=e=>st.isText(e)?Bt({leaf:e,children:e.text}):Tt({element:e,children:K(e.children)}),K=e=>e.map(xt).join(""),Pt=`
  html, body {
    margin: 0;
  }
  html {
    background-color: #fefefe;
    font-family: 'Ubuntu', sans-serif;
  }
  body {
    margin: 15px;
  }
  img {
    max-width: 100%;
    display: block;
    margin-right: auto;
    margin-left: auto;
  }
  figure {
    margin-right: 0;
    margin-left: 0;
    display: block;
  }
  figcaption {
    margin-top: 5px;
    text-align: center;
  }
  h1, h2, h3 {
    font-weight: normal;
  }
  hr {
    background-clip: content-box;
    border-style: none;
    height: 2px;
    border-radius: 1px;
    background-color: #ddd;
    padding: 0.25rem 0;
    margin: 1.5rem 0;
  }

  p {
    margin: 0px;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
    padding-left: 0px;
    padding-right: 0px;
  }
`,_t=u.exports.forwardRef(({children:e},r)=>{var $,k;const[a,d]=u.exports.useState(),o=(k=($=a==null?void 0:a.contentWindow)==null?void 0:$.document)==null?void 0:k.body,n=u.exports.useMemo(()=>d,[d]);u.exports.useEffect(()=>{var y;if(!a)return;const f=(y=a.contentWindow)==null?void 0:y.document;if(!f)return;const h=f.createElement("style");h.innerHTML=Pt,f.head.innerHTML="",f.head.appendChild(h)},[a]);const g=()=>{var h,y;return((h=a==null?void 0:a.contentWindow)==null?void 0:h.document)?(y=a==null?void 0:a.contentWindow)==null?void 0:y.document.documentElement.outerHTML:""};return u.exports.useImperativeHandle(r,()=>({getFullHtml:g})),t("iframe",{style:{width:"100%",minHeight:"300px"},ref:n,children:o&&lt.exports.createPortal(e,o)})});function Lt(){const[e,r]=u.exports.useState(""),[a,d]=u.exports.useState(""),o=u.exports.createRef(),n=()=>{const $=dt("mail-editor"),k=K($.children);r(k)};return u.exports.useEffect(()=>{!o.current||d(o.current.getFullHtml())},[e]),l(p,{children:[t(bt,{}),t("hr",{style:{margin:"25px 0"}}),l("div",{style:{display:"flex",columnGap:"15px",alignItems:"center",marginBottom:"15px"},children:[t(ct,{variant:"h5",children:"Result"}),t(ut,{size:"small",variant:"outlined",onClick:n,children:"Serialize HTML"})]}),l("details",{style:{marginBottom:"15px"},children:[t("summary",{children:"HTML code"}),t("textarea",{style:{width:"100%",height:"300px"},readOnly:!0,value:a})]}),l("details",{open:!0,children:[t("summary",{children:"HTML preview"}),t(_t,{ref:o,children:t("div",{dangerouslySetInnerHTML:{__html:e}})})]})]})}pt.render(t(gt.StrictMode,{children:t(Lt,{})}),document.getElementById("root"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
